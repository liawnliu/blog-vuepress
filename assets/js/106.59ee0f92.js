(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{755:function(t,e,r){"use strict";r.r(e);var s=r(16),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git-的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-的使用"}},[t._v("#")]),t._v(" Git 的使用")]),t._v(" "),r("h2",{attrs:{id:"git-和远程代码库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-和远程代码库"}},[t._v("#")]),t._v(" Git 和远程代码库")]),t._v(" "),r("p",[t._v("    如果需要本地管理代码库可以使用"),r("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),r("OutboundLink")],1),t._v("，它是一个分布式版本管理工具。如果还要远程代码库帮忙存储，就需要使用"),r("a",{attrs:{href:"https://github.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://gitee.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab"),r("OutboundLink")],1),t._v("这样的远程代码管理网站，这些网站都是基于 Git 的，只是将你的代码帮你存储到远程服务器上。"),r("br"),t._v("\n    Git 的使用可以是 shell 命令行形式的，叫做 Git Bash，当然也可用图形化的 Git GUI，还有比较出名的是"),r("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SourceTree"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"git-的安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-的安装"}},[t._v("#")]),t._v(" Git 的安装")]),t._v(" "),r("p",[t._v("只提一下需要注意的地方：")]),t._v(" "),r("ol",[r("li",[t._v("首先进入"),r("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 官网下载页"),r("OutboundLink")],1),t._v("，选择好对应版本后点击下载会很慢，要考虑翻梯子！这个可以看我之前写的"),r("RouterLink",{attrs:{to:"/book-web/常用工具/book-sketches/电脑工具/爬梯.html"}},[t._v("爬梯")]),t._v("那一篇。")],1),t._v(" "),r("li",[t._v("安装不选 C 盘这个应该知道；在“Select Components”的最后一项是“每天都检查 Git 的更新”，这个注意一下，其他随意。")]),t._v(" "),r("li",[t._v("在“Choosing the default editor used by Git”这一步，会选择默认编辑器，我电脑上有 NotePad++和 VSCode，我选择使用“VSCode”作为默认编辑器。")]),t._v(" "),r("li",[t._v("在“Adjusting your PATH environment”这一步，会选择 PATH 环境，也就是 git 命令可以在哪里运行；第一个是只在 git bash 上运行，第二个是也能在 windows 相关的 shell 送给你运行，第三个是不止 git bash 和 windows 相关的 shell，在 UNIX 命令行上也可以；推荐选第二个。")]),t._v(" "),r("li",[t._v("在“Configuring the line ending conversions”这一步，会选择文档末尾以什么格式结束，我使用的是第二个选项。因为前端会使用 MD5 这个东西，相同内容但不同的末尾格式生成的 MD5 是不一样的，一定要区分 LF 和 CRLF 两种末尾格式，所以最好统一以 Unix 系统为准（VSCode 的右下角也有这个，如果 Git 设置了，VSCode 可以不用设置），如果没这个困扰的可以不用管。")])]),t._v(" "),r("h2",{attrs:{id:"创建远程代码库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建远程代码库"}},[t._v("#")]),t._v(" 创建远程代码库")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("点击“New repository”，Repository name 不需要加个性标记，因为 Repository name 始终与 Owner 关联。")])]),t._v(" "),r("li",[r("p",[t._v("Description 则是 Repository 的描述了，一般选 Public 开源项目，Private 是要收费的（Gitee 的私有代码库是免费的）。")])]),t._v(" "),r("li",[r("p",[t._v("gitignore 是“忽略文件”，可以配置不想 push 的文件，像*.class、desktop.ini、.vscode 这样的无需 push 到远程代码库。")])]),t._v(" "),r("li",[r("p",[t._v("license 是“开源许可证”，有问号说明，根据你的需要选择。大多数选 MIT License。")])]),t._v(" "),r("li",[r("p",[t._v("README 是 Repository 里的项目的详细说明。")])]),t._v(" "),r("li",[r("p",[t._v("点击“Create repository”就创建了新的 Repository。")])]),t._v(" "),r("li",[r("p",[t._v("Gitee 创建远程代码库跟以上步骤没什么区别，比较方便的是中文显示。")])])]),t._v(" "),r("h2",{attrs:{id:"关联配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关联配置"}},[t._v("#")]),t._v(" 关联配置")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("Git 和 GitHub 之间的传输是通过 SSH 加密传输的，所以我们要先在 Git 生成 ssh key，再把这个 ssh key 设置到 GitHub。")])]),t._v(" "),r("li",[r("p",[t._v("首先打开 Git Bash（没有就先安装"),r("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),r("OutboundLink")],1),t._v("到本地），输入 "),r("strong",[t._v('ssh-keygen -t rsa -C "邮箱名"')]),t._v(" ，双引号里的内容是你 GitHub 的注册邮箱，输入后一直回车，直至出现虚线框。")])]),t._v(" "),r("li",[r("p",[t._v("去 "),r("strong",[t._v("C:\\Users\\用户名\\.ssh")]),t._v(" 目录下查找 "),r("strong",[t._v("id_rsa.pub")]),t._v(" 文件，用 txt 打开再复制里面的所有内容。")])]),t._v(" "),r("li",[r("p",[t._v("去 GitHub 网站，右上角的账户里有 Settings，点击打开选择 "),r("strong",[t._v("SSH and GPG keys")]),t._v("，再点击 "),r("strong",[t._v("New SSH key")]),t._v("，Title 随便填，Key 则是上一步复制的所有内容，最后生成。")])]),t._v(" "),r("li",[r("p",[t._v("再回到 Git Bash，输入 "),r("strong",[t._v("ssh -T git@github.com")]),t._v(" 检查是否成功，第一次设置会遇到什么什么（yes/no）？直接输入 yes 回车，就可以看到授权成功了。")])]),t._v(" "),r("li",[r("p",[t._v("设置 Git 的提交用户名和邮箱，输入 "),r("strong",[t._v('git config --global user.name "代码提交人昵称"')]),t._v(" 和 "),r("strong",[t._v('git config --global user.email "提交邮箱名"')])])])]),t._v(" "),r("h2",{attrs:{id:"关联本地和远程的代码库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关联本地和远程的代码库"}},[t._v("#")]),t._v(" 关联本地和远程的代码库")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("首先进入 GitHub 网站，点击想要关联的 Repository，点击 Clone or download，拿到远程代码库的 git 地址（可以是 ssh 也可以是 http）。")])]),t._v(" "),r("li",[r("p",[t._v("如果本地没有项目，可以使用 "),r("strong",[t._v("git clone git 地址")]),t._v(" 将远程代码库克隆到本地。")])]),t._v(" "),r("li",[r("p",[t._v("如果本地有项目，而远程是空项目。可以使用 "),r("strong",[t._v("git remote add origin git 地址")]),t._v(" 将本地与远程代码库关联起来。前提示这个本地项目是已经用 "),r("strong",[t._v("git init")]),t._v(" 进行初始化了。")])])]),t._v(" "),r("h2",{attrs:{id:"代码提交、拉取、推送"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码提交、拉取、推送"}},[t._v("#")]),t._v(" 代码提交、拉取、推送")]),t._v(" "),r("ol",[r("li",[r("p",[r("strong",[t._v("暂存")]),t._v("：修改文件后，可以将这些修改后的文件暂存到缓存区，过会准备提交到本地代码库里，使用 "),r("strong",[t._v("git add 文件名")]),t._v(" 将其暂存。提交所有修改就用 "),r("strong",[t._v("git add .")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("提交")]),t._v("：修改的文件被暂存后就可以进行提交了，使用 "),r("strong",[t._v('git commit -m "提交备注"')]),t._v(" 将它们提交到本地代码库。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("撤销")]),t._v("：如果修改有问题想反悔，可以用 git reset --hard HEAD^ 一个^代表上个版本，两个^代表上上个，一百个就是 HEAD~100。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("查看状态")]),t._v("："),r("strong",[t._v("git status")]),t._v(" 查看状态，"),r("strong",[t._v("git log")]),t._v(" 查看提交记录，"),r("strong",[t._v("git reflog")]),t._v(" 查看命令历史（查 commit id），可以把 "),r("strong",[t._v("git reset --hard HEAD^")]),t._v(" 中的 HEAD^替换为 commit id 来回退。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("拉取代码")]),t._v("： 从远程代码库拉取最新代码到本地代码库，可以使用 "),r("strong",[t._v("git pull")]),t._v("。新代码与之前本地代码有冲突的话，就要 "),r("strong",[t._v("git difftool")]),t._v(" 查看冲突，解决完冲突才能进行下一步推送。拉取 master 分支的内容到此分支 "),r("strong",[t._v("git pull origin master")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("推送代码")]),t._v("：版本修改完毕要推送到远程代码库上，"),r("strong",[t._v("git push -u origin master")]),t._v(" 是第一次推送，后面再推送不需要-u，即 "),r("strong",[t._v("git push origin master")]),t._v("，如果你不是 master 分支就 "),r("strong",[t._v("git push origin 分支名")]),t._v("。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("有修改但想先拉取代码")]),t._v("：先 "),r("strong",[t._v("git stash")]),t._v(" 将修改缓存，然后 "),r("strong",[t._v("git pull")]),t._v(" 拉取新代码，最后 "),r("strong",[t._v("git stash pop")]),t._v(" 缓存还原。"),r("a",{attrs:{href:"https://blog.csdn.net/u014536527/article/details/83069636",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考 1"),r("OutboundLink")],1),t._v("，"),r("a",{attrs:{href:"https://blog.csdn.net/fan12389/article/details/105378887",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考 2"),r("OutboundLink")],1),t._v("。")])]),t._v(" "),r("li",[r("p",[t._v("退出一些显示信息，按 q。")])])]),t._v(" "),r("h2",{attrs:{id:"分支管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("列出所有分支："),r("strong",[t._v("git branch")]),t._v("，查看远程的是 "),r("strong",[t._v("git branch -a")])])]),t._v(" "),r("li",[r("p",[t._v("创建分支 xxx："),r("strong",[t._v("git branch xxx")])])]),t._v(" "),r("li",[r("p",[t._v("将当前分支切换到分支 xxx："),r("strong",[t._v("git checkout xxx")])])]),t._v(" "),r("li",[r("p",[t._v("基于当前的分支来创建新分支 xxx 并切换到这个新分支："),r("strong",[t._v("git checkout -b xxx")])])]),t._v(" "),r("li",[r("p",[t._v("基于远程分支 xxxx 来创建新分支 xx 并切换到这个新分支："),r("strong",[t._v("git checkout -b xx origin/xxxx")])])]),t._v(" "),r("li",[r("p",[t._v("将分支 xxx 合并到当前分支："),r("strong",[t._v("git merge origin/xxx")]),t._v("，不合远程的就去掉“origin/”")])]),t._v(" "),r("li",[r("p",[t._v("删除分支 e："),r("strong",[t._v("git branch -d e")]),t._v("，删除不了就强制删除 "),r("strong",[t._v("git branch -D e")])])]),t._v(" "),r("li",[r("p",[t._v("查看哪些分支合并入当前分支："),r("strong",[t._v("git branch –merged")])])]),t._v(" "),r("li",[r("p",[t._v("查看哪些分支未合并入当前分支："),r("strong",[t._v("git branch –no-merged")])])]),t._v(" "),r("li",[r("p",[t._v("更新远程库到本地："),r("strong",[t._v("git fetch origin")])])])]),t._v(" "),r("h2",{attrs:{id:"查看冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看冲突"}},[t._v("#")]),t._v(" 查看冲突")]),t._v(" "),r("p",[t._v("    其实像 VSCode 编辑器自带的冲突显示已经够了，当然也可以配合使用 Beyond Compare 来查看冲突代码\n    在 C:\\Users\\用户名下的.gitconfig 文件中添加以下文本")]),t._v(" "),r("div",{staticClass:"language-text line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[diff]\n    tool = bc4\n[difftool]\n    prompt = false\n[difftool "bc4"]\n    cmd = "\\"D:/Beyond Compare 4/BCompare.exe\\" \\"$LOCAL\\" \\"$REMOTE\\""\n[merge]\n    tool = bc\n[mergetool]\n    prompt = false\n[mergetool "bc4"]\n    cmd = "\\"D:/Beyond Compare 4/BCompare.exe\\" \\"$LOCAL\\" \\"$REMOTE\\" \\"$BASE\\" \\"$MERGED\\""\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br")])]),r("h2",{attrs:{id:"报错信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#报错信息"}},[t._v("#")]),t._v(" 报错信息")]),t._v(" "),r("ol",[r("li",[t._v("push 时报 "),r("strong",[t._v("fatal: unable to access...")]),t._v(" 错，可以试一下 git config --global http.proxy 和 git config --global --unset http.proxy")]),t._v(" "),r("li",[r("strong",[t._v("文件 404 问题")]),t._v("：Git 是默认忽略大小写问题的，修改文件夹的大小写上传到 Git 远程代码库，将这个远程代码库的 build 部分部署到服务器上，在访问修改文件夹下的文件时会出现 404 问题。"),r("strong",[t._v("解决方案：打开本地项目的.git 目录下的 config 文件，修改里面的 ignorecase 选项为 false。")])]),t._v(" "),r("li",[t._v("git detached HEAD：出现“HEAD detached from 072a7ee”，可以先创建一个新分支保存这个游离的版本 "),r("strong",[t._v("git branch xxx 072a7ee")]),t._v(" ，然后切回到原分支（这里是切回 master） "),r("strong",[t._v("git checkout master")]),t._v(" ，最后合并 xxx 和原分支 "),r("strong",[t._v("git merge xxx")]),t._v("（将 xxx 合并到当前分支）。")]),t._v(" "),r("li",[r("code",{pre:!0},[t._v("Failed to connect to github.com port 443: Timed out")]),t._v("问题，为了让连接 GitHub 稳定，在本地使用了 v2rayN。在项目命令行里输入"),r("code",{pre:!0},[t._v("git config --global http.proxy http://127.0.0.1:10809")]),t._v("和"),r("code",{pre:!0},[t._v("git config --global https.proxy http://127.0.0.1:10808")]),t._v("来配置 Git 的代理。（如果是 shadowsocks，端口号应该是 1080，自己打开 shadowsocks 查看即可）（如果想取消 Git 代理，"),r("code",{pre:!0},[t._v("git config --global --unset http.proxy")]),t._v("和"),r("code",{pre:!0},[t._v("git config --global --unset https.proxy")]),t._v("）")])])])}),[],!1,null,null,null);e.default=i.exports}}]);