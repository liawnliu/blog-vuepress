(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{506:function(t,s,r){t.exports=r.p+"assets/img/浏览器的渲染.fce21876.png"},507:function(t,s,r){t.exports=r.p+"assets/img/渲染时间点.fd8bce74.png"},508:function(t,s,r){t.exports=r.p+"assets/img/渲染流水线.d1e44611.png"},509:function(t,s,r){t.exports=r.p+"assets/img/解析HTML1.233b9ce4.png"},510:function(t,s,r){t.exports=r.p+"assets/img/解析HTML2.f38f9777.png"},511:function(t,s,r){t.exports=r.p+"assets/img/解析时遇到CSS.6d0ec24a.png"},512:function(t,s,r){t.exports=r.p+"assets/img/解析时遇到JS.555ce189.png"},513:function(t,s,r){t.exports=r.p+"assets/img/样式计算.be7bf257.png"},514:function(t,s,r){t.exports=r.p+"assets/img/布局.20c20f26.png"},515:function(t,s,r){t.exports=r.p+"assets/img/布局2.5dcfa618.png"},516:function(t,s,r){t.exports=r.p+"assets/img/布局3.29e2f070.png"},517:function(t,s,r){t.exports=r.p+"assets/img/布局4.c392acfd.png"},518:function(t,s,r){t.exports=r.p+"assets/img/分层.39268eae.png"},519:function(t,s,r){t.exports=r.p+"assets/img/绘制.08eebff4.png"},520:function(t,s,r){t.exports=r.p+"assets/img/绘制2.018cf9bb.png"},521:function(t,s,r){t.exports=r.p+"assets/img/分块.4ed3878a.png"},522:function(t,s,r){t.exports=r.p+"assets/img/分块2.36b38d97.png"},523:function(t,s,r){t.exports=r.p+"assets/img/光栅化2.4dcdc492.png"},524:function(t,s,r){t.exports=r.p+"assets/img/光栅化.a083f3fd.png"},525:function(t,s,r){t.exports=r.p+"assets/img/画.f5969435.png"},526:function(t,s,r){t.exports=r.p+"assets/img/渲染完整过程.cc11c21b.png"},527:function(t,s,r){t.exports=r.p+"assets/img/reflow.8158059d.png"},528:function(t,s,r){t.exports=r.p+"assets/img/repaint.40053aaf.png"},529:function(t,s,r){t.exports=r.p+"assets/img/transform效率高.d8c5f9fa.png"},723:function(t,s,r){"use strict";r.r(s);var a=r(16),v=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器的渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染"}},[t._v("#")]),t._v(" 浏览器的渲染")]),t._v(" "),a("h2",{attrs:{id:"浏览器是如何渲染页面的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是如何渲染页面的"}},[t._v("#")]),t._v(" 浏览器是如何渲染页面的")]),t._v(" "),a("p",[a("img",{attrs:{src:r(506),alt:"浏览器的渲染"}})]),t._v(" "),a("p",[t._v("当浏览器的"),a("strong",[t._v("网络线程")]),t._v("收到 HTML 文档后，会产生一个"),a("strong",[t._v("渲染任务")]),t._v("，并将其传递给"),a("strong",[t._v("渲染主线程")]),t._v("的"),a("strong",[t._v("消息队列")]),t._v("。")]),t._v(" "),a("p",[t._v("在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，并启动渲染流程。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(507),alt:"渲染时间点"}})]),t._v(" "),a("p",[t._v("整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。")]),t._v(" "),a("p",[t._v("每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。")]),t._v(" "),a("p",[t._v("这样，整个渲染流程就形成了一套组织严密的生产流水线。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(508),alt:"渲染流水线"}})]),t._v(" "),a("h3",{attrs:{id:"解析-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析-html"}},[t._v("#")]),t._v(" 解析 HTML")]),t._v(" "),a("p",[t._v("渲染的第一步就是"),a("strong",[t._v("解析 HTML")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(509),alt:"解析HTML1"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(510),alt:"解析HTML2"}})]),t._v(" "),a("p",[t._v("解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件。")]),t._v(" "),a("p",[t._v("如果主线程解析到 link 位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(511),alt:"解析时遇到CSS"}})]),t._v(" "),a("p",[t._v("如果主线程解析到 script 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML，这是因为 JS 代码的执行过程"),a("strong",[t._v("可能会修改当前的 DOM 树")]),t._v("，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(512),alt:"解析时遇到JS"}})]),t._v(" "),a("p",[t._v("第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。")]),t._v(" "),a("h3",{attrs:{id:"样式计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[t._v("#")]),t._v(" 样式计算")]),t._v(" "),a("p",[t._v("渲染的下一步是样式计算。")]),t._v(" "),a("p",[t._v("主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为"),a("code",{pre:!0},[t._v("Computed Style")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(513),alt:"样式计算"}})]),t._v(" "),a("p",[t._v("在这一过程中，很多预设值会变成绝对值，比如"),a("code",{pre:!0},[t._v("red")]),t._v("会变成"),a("code",{pre:!0},[t._v("regb(255, 0, 0)")]),t._v("；相对单位会变成绝对单位，比如"),a("code",{pre:!0},[t._v("em")]),t._v("会变成"),a("code",{pre:!0},[t._v("px")]),t._v("。")]),t._v(" "),a("p",[t._v("这一步完成后，会得到一颗带有样式的 DOM 树。")]),t._v(" "),a("h3",{attrs:{id:"布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),a("p",[t._v("接下来是布局，布局完成后会得到布局树。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(514),alt:"布局"}})]),t._v(" "),a("p",[t._v("布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的"),a("strong",[t._v("几何信息")]),t._v("。例如节点的宽高、相对包含块的位置。")]),t._v(" "),a("p",[t._v("大部分时候，DOM 树和布局树并非一一对应。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(515),alt:"布局2"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(516),alt:"布局3"}})]),t._v(" "),a("p",[t._v("比如"),a("code",{pre:!0},[t._v("display:none")]),t._v("的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(517),alt:"布局4"}})]),t._v(" "),a("h3",{attrs:{id:"分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),a("p",[t._v("主线程会使用一套复杂的策略对整个布局树中进行分层。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(518),alt:"分层"}})]),t._v(" "),a("p",[t._v("分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。")]),t._v(" "),a("p",[t._v("滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过"),a("code",{pre:!0},[t._v("will-change")]),t._v("属性更大程度的影响分层结果。")]),t._v(" "),a("h3",{attrs:{id:"绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制"}},[t._v("#")]),t._v(" 绘制")]),t._v(" "),a("p",[t._v("主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(519),alt:"绘制"}})]),t._v(" "),a("p",[a("img",{attrs:{src:r(520),alt:"绘制2"}})]),t._v(" "),a("h3",{attrs:{id:"分块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分块"}},[t._v("#")]),t._v(" 分块")]),t._v(" "),a("p",[t._v("完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。")]),t._v(" "),a("p",[t._v("合成线程首先对每个图层进行分块，将其划分为更多的小区域。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(521),alt:"分块"}})]),t._v(" "),a("p",[t._v("它会从线程池中拿取多个线程来完成分块工作。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(522),alt:"分块2"}})]),t._v(" "),a("h3",{attrs:{id:"光栅化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#光栅化"}},[t._v("#")]),t._v(" 光栅化")]),t._v(" "),a("p",[t._v("分块完成后，进入光栅化阶段。")]),t._v(" "),a("p",[t._v("合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(523),alt:"光栅化2"}})]),t._v(" "),a("p",[t._v("GPU 进程会开启多个线程来完成光栅化，并且优先处理近视口区域的块。")]),t._v(" "),a("p",[t._v("光栅化的结果，就是一块一块的位图。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(524),alt:"光栅化"}})]),t._v(" "),a("h3",{attrs:{id:"画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#画"}},[t._v("#")]),t._v(" 画")]),t._v(" "),a("p",[t._v("最后一个阶段就是画了。")]),t._v(" "),a("p",[t._v("合成线程拿到每个层、每个块的位图后，生成一个个[指引]信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(525),alt:"画"}})]),t._v(" "),a("p",[t._v("指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。")]),t._v(" "),a("p",[t._v("变形发生在合成线程，与渲染主线程无关，这就是"),a("code",{pre:!0},[t._v("transform")]),t._v("效率高的本质原因。")]),t._v(" "),a("p",[t._v("合成线程会把"),a("code",{pre:!0},[t._v("quad")]),t._v("提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(526),alt:"渲染完整过程"}})]),t._v(" "),a("h2",{attrs:{id:"什么是-reflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-reflow"}},[t._v("#")]),t._v(" 什么是 reflow")]),t._v(" "),a("p",[t._v("reflow 的本质就是重新计算 layout 树。")]),t._v(" "),a("p",[t._v("当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(527),alt:"reflow"}})]),t._v(" "),a("p",[t._v("为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。")]),t._v(" "),a("p",[t._v("也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。")]),t._v(" "),a("p",[t._v("浏览器在反复权衡下，最终决定获取属性立即 reflow。")]),t._v(" "),a("h2",{attrs:{id:"什么是-repaint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-repaint"}},[t._v("#")]),t._v(" 什么是 repaint")]),t._v(" "),a("p",[t._v("repaint 的本质就是重新根据分层信息计算了绘制指令。")]),t._v(" "),a("p",[t._v("当改动了可见样式后，就需要重新计算，会引发 repaint。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(528),alt:"repaint"}})]),t._v(" "),a("p",[t._v("由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。")]),t._v(" "),a("h2",{attrs:{id:"为什么-transform-的效率高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-transform-的效率高"}},[t._v("#")]),t._v(" 为什么 transform 的效率高")]),t._v(" "),a("p",[t._v("因为"),a("code",{pre:!0},[t._v("transform")]),t._v("既不影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个[draw]阶段。")]),t._v(" "),a("p",[t._v("由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(529),alt:"transform效率高"}})])])}),[],!1,null,null,null);s.default=v.exports}}]);