(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{236:function(t,o,r){t.exports=r.p+"assets/img/CocosCreator编辑器.22da8355.png"},691:function(t,o,r){"use strict";r.r(o);var e=r(16),s=Object(e.a)({},(function(){var t=this,o=t.$createElement,e=t._self._c||o;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),e("h2",{attrs:{id:"cocoscreator-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cocoscreator-安装"}},[t._v("#")]),t._v(" CocosCreator 安装")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在"),e("a",{attrs:{href:"https://www.cocos.com/creator/",target:"_blank",rel:"noopener noreferrer"}},[t._v("引擎官网"),e("OutboundLink")],1),t._v("下载对应操作平台的 CocosCreator 版本。")])]),t._v(" "),e("li",[e("p",[t._v("可能会要求先下载安装 "),e("strong",[t._v("Cocos Dashboard")]),t._v("，如果已经安装过就直接使用它来下载 CocosCreator。在安装 Cocos Dashboard 过程中，会提示安装 "),e("strong",[t._v("Visual Studio 和 C++编译配套工具")]),t._v("，当前暂不考虑发布到 windows 平台所以跳过这一步（"),e("a",{attrs:{href:"https://docs.cocos.com/creator/manual/zh/publish/setup-native-development.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("后面需要发布到原生平台时再考虑"),e("OutboundLink")],1),t._v("）。")])]),t._v(" "),e("li",[e("p",[t._v("安装好 Cocos Dashboard 后，打开它并在设置里将 "),e("strong",[t._v("“编辑器目录”")]),t._v(" 和 "),e("strong",[t._v("“语言”")]),t._v(" 设置好。然后点开 "),e("strong",[t._v("“编辑器”")]),t._v(" 标签，下载稳定版本的 CocosCreator；它会临时下载到 C 盘，但不用担心，它过会就自动移动到之前设置好的 "),e("strong",[t._v("“编辑器目录”")]),t._v(" 里。")])]),t._v(" "),e("li",[e("p",[t._v("打开 "),e("strong",[t._v("“编辑器目录”")]),t._v("，可以看到已经安装好的 CocosCreator，双击 "),e("strong",[t._v("“CocosCreator.exe”")]),t._v(" 就可以使用 Cocos Creator 来开发了，当然你也可以通过 Cocos Dashboard 的“项目”来打开 Cocos Creator。")])]),t._v(" "),e("li",[e("p",[t._v("一些注意事项需到引擎官网的"),e("a",{attrs:{href:"https://docs.cocos.com/creator/manual/zh/getting-started/install.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("“安装和启动”"),e("OutboundLink")],1),t._v("上查看，这里不展开了。")])])]),t._v(" "),e("h2",{attrs:{id:"代码管理-git-、扩展包管理-npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码管理-git-、扩展包管理-npm"}},[t._v("#")]),t._v(" 代码管理(Git)、扩展包管理(npm)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("先下载安装"),e("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),e("OutboundLink")],1),t._v(" 和"),e("a",{attrs:{href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js"),e("OutboundLink")],1),t._v("。Git 的使用可以查看之前写的——"),e("RouterLink",{attrs:{to:"/book-web/常用工具/Git的使用.html"}},[t._v("Git 的使用")]),t._v("，Npm 的使用可以查看之前写的——"),e("RouterLink",{attrs:{to:"/book-web/常用工具/Npm的使用.html"}},[t._v("Npm 的使用")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("定位到之前新建的 CocosCreator 项目的根目录下，在空白处右击并选择 "),e("strong",[t._v("“Git Bash Here”")]),t._v("，在命令行窗口中输入 "),e("strong",[t._v("git init")]),t._v("，为项目添加代码管理工具。当然，如果项目已经存在于线上 git 代码库了，直接使用 "),e("strong",[t._v("git clone xxx")]),t._v(" 命令克隆下来即可。")])]),t._v(" "),e("li",[e("p",[t._v("命令行窗口不要关闭，继续输入 "),e("strong",[t._v("npm init")]),t._v(" ，为该项目添加 npm 管理工具，后面需要什么依赖再安装什么依赖。当然，你也可以先将 "),e("strong",[t._v("package.json")]),t._v(" 配置好（需要的依赖包），然后运行 "),e("strong",[t._v("npm install")]),t._v(" 将所有的依赖下载好。")])])]),t._v(" "),e("h2",{attrs:{id:"代码编辑器-vscode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码编辑器-vscode"}},[t._v("#")]),t._v(" 代码编辑器(VSCode)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("使用 Cocos Creator 直接编写脚本效率不高也不方便，所以得给项目专门配置一个代码编辑工具"),e("a",{attrs:{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSCode"),e("OutboundLink")],1),t._v("，VSCode 的使用可以查看之前写的——"),e("RouterLink",{attrs:{to:"/book-web/常用工具/VSCode的使用.html"}},[t._v("VSCode 的使用")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("要为 VSCode 编辑状态下注入符合 Cocos Creator 组件脚本使用习惯的语法提示。使用 Cocos Creator 打开某个项目，然后依次点击主菜单里 "),e("strong",[t._v("“开发者”-“VSCode 工作流”-“安装 VSCode 扩展插件”")]),t._v("，控制台里出现“VS Code extension installed to ...”的字样就表示 VSCode 的 cocos 提示插件安装成功了。该操作会将 Cocos Creator API 适配插件安装到 VSCode "),e("strong",[t._v("全局")]),t._v(" 的插件文件夹中。")])]),t._v(" "),e("li",[e("p",[t._v("普通提示可能不够，需要再加个插件让 VSCode 具有引擎 API 的智能提示。"),e("strong",[t._v("“开发者”-“VSCode 工作流”-“更新 VSCode 智能提示数据”")]),t._v("，控制台里出现“API data generated and copied to ...”的字样就表示智能提示配置完毕。该操作会自动将“根据引擎 API 生成的 creator.d.ts 数据文件”复制到项目根目录下。")])]),t._v(" "),e("li",[e("p",[t._v("如果使用的是"),e("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript"),e("OutboundLink")],1),t._v("来编写脚本的，那要配置 "),e("strong",[t._v("tsconfig.json")]),t._v("。"),e("strong",[t._v("“开发者”-“VSCode 工作流”-“添加 TypeScript 项目配置”")]),t._v("，控制台里出现“TypeScript Configuration file has been copied to ...”的字样就表示插件配置完毕。该操作会自动为项目生成 tsconfig.json 并放到项目根目录下，这个配置并不完善需要自己补充。当然，对应的 "),e("strong",[t._v("tslint.json")]),t._v(" 也要自己完善一下。没有安装 ts 的记得 "),e("strong",[t._v("“npm install --save-dev typescript”")]),t._v(" 安装一下。")])]),t._v(" "),e("li",[e("p",[t._v("当在 VSCode 上修改脚本后，需要让 CocosCreator 编辑器获取焦点（切换到该应用）才能进行编译预览。可以在 VSCode 上配置编译任务，来触发 CocosCreator 进行编译。首先下载安装"),e("a",{attrs:{href:"https://curl.haxx.se/windows/",target:"_blank",rel:"noopener noreferrer"}},[t._v("curl"),e("OutboundLink")],1),t._v("，然后在 Cocos Creator 编辑器选择 "),e("strong",[t._v("“开发者”-“VSCode 工作流”-“添加编译任务”")]),t._v('。还可以为该任务配置快捷键{"key": "alt+q","command": "workbench.action.tasks.runTask","args": "mycompile"}。')])])]),t._v(" "),e("h2",{attrs:{id:"代码调试-debugger"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码调试-debugger"}},[t._v("#")]),t._v(" 代码调试(Debugger)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("安装"),e("a",{attrs:{href:"https://www.google.cn/chrome/",target:"_blank",rel:"noopener noreferrer"}},[t._v("谷歌浏览器"),e("OutboundLink")],1),t._v("；再安装 VSCode 的插件——Debugger for Chrome，这个在 VSCode 编辑器的左侧“扩展”里搜索“Debugger for Chrome”再点击“Install”。")])]),t._v(" "),e("li",[e("p",[t._v("打开 CocosCreator 编辑器，"),e("strong",[t._v("“开发者”-“VSCode 工作流”-“添加 Chrome Debug 配置”")]),t._v("，控制台里出现“Chrome debug setting has been updated to ...”的字样就表示流程配置完毕。该操作会自动为项目的.vscode 目录下生成 launch.json 文件。")])]),t._v(" "),e("li",[e("p",[t._v("项目预览时使用的端口要与 launch.json 里的 url 后面的端口保持一致。")])])]),t._v(" "),e("h2",{attrs:{id:"代码测试-mocha、chai"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码测试-mocha、chai"}},[t._v("#")]),t._v(" 代码测试(mocha、chai)")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("引擎里的元素在 Node 环境下可能跑不起来（没有 Window），所以用单元测试测跟引擎元素无关的逻辑。这样只需要用到 mocha+chai，而"),e("a",{attrs:{href:"https://www.npmjs.com/package/mochawesome",target:"_blank",rel:"noopener noreferrer"}},[t._v("mochawesome"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.npmjs.com/package/nyc",target:"_blank",rel:"noopener noreferrer"}},[t._v("nyc"),e("OutboundLink")],1),t._v("两种报告其实没什么必要。")])]),t._v(" "),e("li",[e("p",[t._v("关于 mocha 和 chai 的内容可以查看这篇——"),e("RouterLink",{attrs:{to:"/book-web/web前端测试与调试/基于mocha+chai的单元测试.html"}},[t._v("基于 mocha+chai 的单元测试")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("可以等引擎团队推出专门的测试框架（unity 就有自己的测试框架）；自己写的话，要引一些包修改一些东西有些麻烦，平常使用 mock 数据来对自己的组件进行测试就可以了。")])])]),t._v(" "),e("h2",{attrs:{id:"cocoscreator-项目结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cocoscreator-项目结构"}},[t._v("#")]),t._v(" CocosCreator 项目结构")]),t._v(" "),e("p",[t._v("    打开 Cocos Creator，根据需要选择新建空项目还是实例项目；然后在底部填好项目创建目录，最后点击“新建”即可。创建之后的项目有特定的文件夹结构，可以稍微了解一下。")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ProjectName（项目文件夹）\n  │--assets （ 资源文件夹：存放游戏所需的本地资源、脚本和第三方库文件。会生出对应的.meta文件。）\n  │--library （ 资源库：assets中的资源导入后生成的，后面会被处理成最终游戏发布时需要的形式。）\n  │--local（ 本地设置：项目在本机上的配置信息，包括编辑器面板布局，窗口大小，位置等信息。）\n  │--packages（ 扩展插件文件夹：存放项目里的自定义插件。删除插件时只需删除对应文件夹即可。）\n  │--settings （ 项目设置： 保存项目相关的设置，如构建发布菜单里的包名、场景和平台选择等。）\n  │--temp（ 临时文件夹：用于缓存一些CocosCreator在本地的临时文件。）\n  │--.gitignore（ git忽略设置：设置项目中一些无需提交到git的文件或文件夹。）\n  │--creator.d（ 智能提示：CocosCreator生成的智能提示文件，用于编辑器上编辑时出现的智能提示。）\n  │--jsconfig.json（ javascript配置：用于配置项目的js版本信息、基本规范等。）\n  │--project.json（ 同assets的.meta：作为验证CocosCreator项目合法性的标志。两者合法才能打开项目。）\n  │--tsconfig.json（ typescript配置：用于配置项目的ts版本信息、基本规范等。）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h2",{attrs:{id:"认识-cocoscreator-编辑器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#认识-cocoscreator-编辑器"}},[t._v("#")]),t._v(" 认识 CocosCreator 编辑器")]),t._v(" "),e("ul",[e("li",[t._v("CocosCreator 编辑器主要由 "),e("strong",[t._v("资源管理器、场景编辑器、层级管理器、属性检查器、控件库、动画编辑器、控制台")]),t._v(" 等组成。")]),t._v(" "),e("li",[t._v("项目打开时，默认的界面布局如下"),e("br"),t._v(" "),e("img",{attrs:{src:r(236),alt:"CocosCreator编辑器布局"}})]),t._v(" "),e("li",[t._v("可以对它们进行移动或组合，还可以改变他们的大小边界。想恢复原始界面，可以点击上方的 "),e("strong",[t._v("“布局”-“恢复默认布局”")]),t._v("，当然你也可以选择 "),e("strong",[t._v("“经典布局”")]),t._v(" 和 "),e("strong",[t._v("“竖屏游戏布局”")]),t._v("。")])])])}),[],!1,null,null,null);o.default=s.exports}}]);