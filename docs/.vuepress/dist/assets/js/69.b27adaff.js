(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{668:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[s._v("#")]),s._v(" 基础语法")]),s._v(" "),a("h2",{attrs:{id:"一、基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、基本概念"}},[s._v("#")]),s._v(" 一、基本概念")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("区分大小写")]),s._v("：ECMAScript一切（"),a("strong",[s._v("变量、函数名、操作符")]),s._v("）都是 "),a("strong",[s._v("区分大小写")]),s._v(" 的；例如："),a("code",[s._v("test")]),s._v("和"),a("code",[s._v("Test")]),s._v("变量不是同一个变量，typeOf可作为函数名，但typeof是关键字不能作为函数名。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("标识符")]),s._v("：指变量、函数、属性、参数的 "),a("strong",[s._v("名字")]),s._v("；可以是一个或多个字符组合，但 "),a("strong",[s._v("第一个字符不能是数字")]),s._v("，其他情况下可用 "),a("strong",[s._v("字母、下划线、美元符号、数字")]),s._v("；建议采用 "),a("strong",[s._v("驼峰写法")]),s._v("，即第一个字母小写后面单词首字母大写，其实 "),a("strong",[s._v("全部使用小写也可以（不太规范）")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("注释")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 单行注释")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n * 多行注释（为了提高可读性，多行注释前都带上*）\n */")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("严格模式")]),s._v("：ECMAScript5提出的，对3版本的不确定行为加以处理，不安全的操作也会抛错，写法：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"use strict"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其他内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("语句")]),s._v("：每句后面可以没有分号，但要是压缩代码就会出错，所以 "),a("strong",[s._v("推荐加上分号")]),s._v("，if语句后推荐使用{}，"),a("strong",[s._v("即使只有一句")]),s._v("，这样可以提高代码的可读性。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("关键字")]),s._v("：具有特定用途，不能作为标识符。"),a("code",[s._v("break")]),s._v("、"),a("code",[s._v("case")]),s._v("、"),a("code",[s._v("catch")]),s._v("、"),a("code",[s._v("continue")]),s._v("、"),a("code",[s._v("default")]),s._v("、"),a("code",[s._v("delete")]),s._v("、"),a("code",[s._v("do")]),s._v("、"),a("code",[s._v("else")]),s._v("、"),a("code",[s._v("finally")]),s._v("、"),a("code",[s._v("for")]),s._v("、"),a("code",[s._v("function")]),s._v("、"),a("code",[s._v("if")]),s._v("、"),a("code",[s._v("in")]),s._v("、"),a("code",[s._v("instanceof")]),s._v("、"),a("code",[s._v("new")]),s._v("、"),a("code",[s._v("return")]),s._v("、"),a("code",[s._v("switch")]),s._v("、"),a("code",[s._v("this")]),s._v("、"),a("code",[s._v("throw")]),s._v("、"),a("code",[s._v("try")]),s._v("、"),a("code",[s._v("typeof")]),s._v("、"),a("code",[s._v("var")]),s._v("、"),a("code",[s._v("void")]),s._v("、"),a("code",[s._v("while")]),s._v("、"),a("code",[s._v("with")]),s._v("、"),a("code",[s._v("debugger")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("保留字")]),s._v("：将来可能被用作关键字，也不能作为标识符")]),s._v(" "),a("ul",[a("li",[s._v("第3版保留字："),a("code",[s._v("abstract")]),s._v("、"),a("code",[s._v("boolean")]),s._v("、"),a("code",[s._v("byte")]),s._v("、"),a("code",[s._v("char")]),s._v("、"),a("code",[s._v("double")]),s._v("、"),a("code",[s._v("final")]),s._v("、"),a("code",[s._v("float")]),s._v("、"),a("code",[s._v("goto")]),s._v("、"),a("code",[s._v("int")]),s._v("、"),a("code",[s._v("long")]),s._v("、"),a("code",[s._v("native")]),s._v("、"),a("code",[s._v("short")]),s._v("、"),a("code",[s._v("synchronized")]),s._v("、"),a("code",[s._v("throws")]),s._v("、"),a("code",[s._v("transient")]),s._v("、"),a("code",[s._v("volatile")])]),s._v(" "),a("li",[s._v("第5版严格模式下保留字："),a("code",[s._v("implements")]),s._v("、"),a("code",[s._v("interface")]),s._v("、"),a("code",[s._v("package")]),s._v("、"),a("code",[s._v("private")]),s._v("、"),a("code",[s._v("protected")]),s._v("、"),a("code",[s._v("public")]),s._v("、"),a("code",[s._v("static")]),s._v("、"),a("code",[s._v("let")]),s._v("、"),a("code",[s._v("yield")])]),s._v(" "),a("li",[s._v("第5版非严格模式下保留字："),a("code",[s._v("class")]),s._v("、"),a("code",[s._v("const")]),s._v("、"),a("code",[s._v("enum")]),s._v("、"),a("code",[s._v("export")]),s._v("、"),a("code",[s._v("extends")]),s._v("、"),a("code",[s._v("import")]),s._v("、"),a("code",[s._v("super")])])])])]),s._v(" "),a("h2",{attrs:{id:"二、变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、变量声明"}},[s._v("#")]),s._v(" 二、变量声明")]),s._v(" "),a("p",[s._v("js的变量可以用来保存任何类型的数据（松散类型），例如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" found "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("不推荐修改变量所保存值的类型，实际上是可以的；")]),s._v(" "),a("li",[s._v("不推荐省略var，虽然省略var可以作为全局变量，但很难维护，并且未经声明的变量赋值在严格模式抛ReferenceError错误；")]),s._v(" "),a("li",[s._v("严格模式下变量名不要取“eval”和“argument”。")])]),s._v(" "),a("h2",{attrs:{id:"三、数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、数据类型"}},[s._v("#")]),s._v(" 三、数据类型")]),s._v(" "),a("ul",[a("li",[s._v("ECMAScript有6种数据类型，其中 "),a("strong",[s._v("undefined、null、boolean、number和string")]),s._v(" 是简单（基本）数据类型，剩下的 "),a("strong",[s._v("Object")]),s._v(" 是一种复杂数据类型。")]),s._v(" "),a("li",[s._v("因ECMAScript的变量是松散类型，我们可用 "),a("strong",[s._v("typeof操作符")]),s._v(" 来检测变量的数据类型，写法："),a("code",[s._v("typeof message")]),s._v("或"),a("code",[s._v("typeof(message)")]),s._v("。它会返回这些字符串："),a("code",[s._v('"undefined"')]),s._v("、"),a("code",[s._v('"boolean"')]),s._v("、"),a("code",[s._v('"string"')]),s._v("、"),a("code",[s._v('"number"')]),s._v("、"),a("code",[s._v('"object"')]),s._v("、"),a("code",[s._v('"function"')]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"_3-1-undefined和null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-undefined和null"}},[s._v("#")]),s._v(" 3.1 undefined和null")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里相当于var message = undefined;")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true。message === null的结果就是false，因为此时message就是undefined")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "undefined"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" car "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常规写法，声明变量一般都会初始化，不知道赋什么那就赋个null也是可以的")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" car"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "object"。null值表示空对象指针，它实际上是个object类型')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true。undefined派生自null，但这只是出于比较的目的")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("事实上null和undefined完全不同，我们没有必要将变量显式设为undefined，若要展示保存而未知其值可以null临时将其保存，所以不推荐"),a("code",[s._v("var message;")]),s._v("这种写法，可以"),a("code",[s._v("var message = null;")])]),s._v(" "),a("h3",{attrs:{id:"_3-2-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-boolean"}},[s._v("#")]),s._v(" 3.2 boolean")]),s._v(" "),a("p",[s._v("布尔类型Boolean：只有两个字面量，"),a("code",[s._v("true")]),s._v("（真）和"),a("code",[s._v("false")]),s._v("（假）。")]),s._v(" "),a("p",[s._v("任何数据类型的值调用"),a("code",[s._v("Boolean()")]),s._v("函数都会返回一个Boolean值：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Boolean()")]),s._v(" "),a("th",[s._v("转换为true值")]),s._v(" "),a("th",[s._v("转换为false值")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("String")]),s._v(" "),a("td",[s._v("任何非空字符串")]),s._v(" "),a("td",[s._v('""（空字符串）')])]),s._v(" "),a("tr",[a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("任何非零数值（包含无穷大）")]),s._v(" "),a("td",[s._v("0和NaN（非数值）")])]),s._v(" "),a("tr",[a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("任何对象")]),s._v(" "),a("td",[s._v("null")])]),s._v(" "),a("tr",[a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("n/a或N/A（not applicable）")]),s._v(" "),a("td",[s._v("undefined")])])])]),s._v(" "),a("p",[s._v("流控制语句（例如if语句）会自动执行相应的Boolean转换")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非空字符串转换为true值")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Value is true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_3-3-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-number"}},[s._v("#")]),s._v(" 3.3 number")]),s._v(" "),a("p",[s._v("该类型比较受关注，用IEEE754格式来表示 "),a("strong",[s._v("整数和浮点数值")]),s._v("，ECMA-262定义了 "),a("strong",[s._v("十进制、八进制、十六进制")]),s._v(" 三种数字字面量格式。"),a("br"),s._v("\n其中八进制在严格模式下是无效的；在非严格模式下类似079、08会被解析成十进制的79和9；另外十六进制A-F可大写也可小写。")]),s._v(" "),a("h4",{attrs:{id:"_3-3-1-浮点数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-浮点数值"}},[s._v("#")]),s._v(" 3.3.1 浮点数值")]),s._v(" "),a("ul",[a("li",[s._v("该数字要有一个小数点且小数点后至少要有一个数值，但不推荐"),a("code",[s._v(".1")]),s._v("这种写法，即不要省略整数位；")]),s._v(" "),a("li",[s._v("为节省内存"),a("code",[s._v("1.")]),s._v("和"),a("code",[s._v("10.0")]),s._v("这样的值会被转换为整数；")]),s._v(" "),a("li",[s._v("对极大或极小值通常用科学计数法，像0.0000003在默认情况下（带6个零及以上的浮点数）自动转化为e表示法；")]),s._v(" "),a("li",[s._v("需要注意的一点，由于 "),a("strong",[s._v("IEEE754浮点计算通病")]),s._v("，"),a("code",[s._v("0.1+0.2")]),s._v("是等于"),a("code",[s._v("0.30000000000000004")]),s._v("（17为小数），"),a("code",[s._v("0.05+0.25")]),s._v("或"),a("code",[s._v("0.15+0.15")]),s._v("不会出现问题，不要直接加，可以使用精度来转化。")])]),s._v(" "),a("h4",{attrs:{id:"_3-3-2-数值范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-数值范围"}},[s._v("#")]),s._v(" 3.3.2 数值范围")]),s._v(" "),a("ul",[a("li",[s._v("Number.MIN_VALUE：能表示的最小数值，通常是5e-324；")]),s._v(" "),a("li",[s._v("Number.MAX_VALUE：能表示的最大数值，通常是1.7976931348623157e+308；")]),s._v(" "),a("li",[s._v("Number.NEGATIVE_INFINITY：-Infinity负无穷")]),s._v(" "),a("li",[s._v("Number.POSITIVE_INFINITY：Infinity正无穷")])]),s._v(" "),a("p",[a("code",[s._v("isFinite()")]),s._v("函数在参数位于最小与最大数值之间时会返回true，例如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_VALUE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFinite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"_3-3-3-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-nan"}},[s._v("#")]),s._v(" 3.3.3 NaN")]),s._v(" "),a("p",[a("code",[s._v("NaN")]),s._v("是非数值(Not a Number)，表示一个本来要返回数值的操作数但未返回数值的情况。")]),s._v(" "),a("p",[s._v("有两个特点：")]),s._v(" "),a("ul",[a("li",[s._v("任何涉及NaN的操作（例如"),a("code",[s._v("NaN/10")]),s._v("）都会返回"),a("code",[s._v("NaN")]),s._v("；")]),s._v(" "),a("li",[a("code",[s._v("NaN")]),s._v("与任何值都不相等，包括"),a("code",[s._v("NaN")]),s._v("本身，"),a("code",[s._v("NaN == NaN")]),s._v("为false。")])]),s._v(" "),a("p",[s._v("针对这两个特点定义了"),a("code",[s._v("isNaN()")]),s._v("函数，判断参数是否“不是数值”，函数拿到这个入参时会将这个值 "),a("strong",[s._v("尝试转换为数值")]),s._v("，其实调用的是"),a("code",[s._v("Number()")]),s._v("函数。")]),s._v(" "),a("h4",{attrs:{id:"_3-3-4-数值转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-数值转换"}},[s._v("#")]),s._v(" 3.3.4 数值转换")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("parseInt()")]),s._v("和"),a("code",[s._v("parseFloat()")]),s._v("可以把字符串转化为 "),a("strong",[s._v("整数")]),s._v(" 和 "),a("strong",[s._v("浮点数")]),s._v("。")]),s._v(" "),a("p",[s._v("而使用"),a("code",[s._v("Number()")]),s._v("可以将任何数据类型转化为数值，其规则是：")]),s._v(" "),a("ul",[a("li",[s._v("如果是Boolean值，true将被转换为1，false将被转换为0；")]),s._v(" "),a("li",[s._v("如果是null值，返回0，如果是undefined，返回NaN；")]),s._v(" "),a("li",[s._v("如果是字符串：\n"),a("ul",[a("li",[s._v("有效浮点格式的字符串会被转换为浮点数；")]),s._v(" "),a("li",[s._v("整数型的字符串八进制的不会被视为八进制（"),a("code",[s._v("011")]),s._v("会转换为"),a("code",[s._v("11")]),s._v("），只会将十六进制和十进制格式的字符串转换为相等大小的十进制整数数值；")]),s._v(" "),a("li",[s._v("空字符串"),a("code",[s._v('""')]),s._v("转换为0；")]),s._v(" "),a("li",[s._v("其他情况的字符串会转换为NaN；")])])]),s._v(" "),a("li",[s._v("如果是对象，先调用对象的"),a("code",[s._v("valueOf()")]),s._v("再按照上述规则转换，然后若得到NaN就去调用"),a("code",[s._v("toString()")]),s._v("再按照上述规则转换")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以看出"),a("code",[s._v("Number()")]),s._v("在转化字符串时比较复杂，我们推荐"),a("code",[s._v("parseInt()")]),s._v("来处理整数格式的字符串")]),s._v(" "),a("ul",[a("li",[s._v("parseInt()在接卸字符串时会忽略前面的空格，直到找到 "),a("strong",[s._v("第一个数字或负号")]),s._v("，也就是说parseInt()在字符串还是 "),a("strong",[s._v("非整数格式")]),s._v(" 或 "),a("strong",[s._v("空字符串")]),s._v(" 时会返回NaN;")]),s._v(" "),a("li",[s._v("在找到一个数字字符后会继续解析直到遇到 "),a("strong",[s._v("非数字字符")]),s._v("；")]),s._v(" "),a("li",[s._v("由于ECMAScript 3和5对八进制字面量解析时存在分歧，所以我们会推荐使用 "),a("strong",[s._v("基数")]),s._v(" 来指明是按几进制来解析。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   1234blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1234")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 空字符串使用parseInt()会解析成NaN，而Number()是0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0xAF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按基数16来解析，175")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 基数16和0x必须要有一个，NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按二进制解析，结果为2，我们非常推荐使用这种写法")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3-4-string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-string类型"}},[s._v("#")]),s._v(" 3.4 String类型")]),s._v(" "),a("p",[s._v("String类型用于表示由零或多个16位Unicode字符组成的字符串。")]),s._v(" "),a("h4",{attrs:{id:"_3-4-1-转义序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-转义序列"}},[s._v("#")]),s._v(" 3.4.1 转义序列")]),s._v(" "),a("p",[a("code",[s._v("\\n")]),s._v("换行，"),a("code",[s._v("\\t")]),s._v("制表，"),a("code",[s._v("\\b")]),s._v("退格，"),a("code",[s._v("\\r")]),s._v("回车，"),a("code",[s._v("\\f")]),s._v("进纸，"),a("code",[s._v("\\\\")]),s._v("斜杠，"),a("code",[s._v("\\'")]),s._v("单引号，"),a("code",[s._v('\\"')]),s._v("双引号，"),a("br"),s._v(" "),a("code",[s._v("\\xnn")]),s._v(" 以十六进制代码nn表示的一个字符（其中n为"),a("code",[s._v("0~F")]),s._v("），例如"),a("code",[s._v("\\x41")]),s._v("表示"),a("code",[s._v("A")]),s._v("，"),a("br"),s._v(" "),a("code",[s._v("\\unnnn")]),s._v(" 以十六进制代码nnnn表示的一个Unicode字符（其中n为"),a("code",[s._v("0~F")]),s._v("），例如"),a("code",[s._v("\\u03a3")]),s._v("表示"),a("code",[s._v("Σ")]),s._v("，"),a("br"),s._v("\n其中4个字符长的转义序列和6个字符长的转义序列在字符串中只占1位。")]),s._v(" "),a("h4",{attrs:{id:"_3-4-2-字符串的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-字符串的特点"}},[s._v("#")]),s._v(" 3.4.2 字符串的特点")]),s._v(" "),a("p",[s._v("字符串的值是不可变的，有些例子看起来是可变，其实原字符串销毁新字符串创建是在后台完成的。")]),s._v(" "),a("h4",{attrs:{id:"_3-4-3-字符串转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-字符串转换"}},[s._v("#")]),s._v(" 3.4.3 字符串转换")]),s._v(" "),a("p",[s._v("将一个值转换成字符串有两种方式，第一种是使用几乎每个值都有的"),a("code",[s._v("toString()")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "11"')]),s._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "10"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("toString()")]),s._v("方法也可以使用基数：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "1010"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("null和undefined值是没有toString()方法的，那么可以使用字符串转换的"),a("code",[s._v("第二种方式String()")]),s._v("，其规则是：传入的值有toString()则会调用toString()，若传入的值是null、undefined则返回"),a("code",[s._v('"null"')]),s._v("、"),a("code",[s._v('"undefined"')]),s._v("这样的字符串。")]),s._v(" "),a("p",[s._v("其实转化为字符串有种更快捷的方法就是"),a("code",[s._v('xxx + ""')])]),s._v(" "),a("h3",{attrs:{id:"_3-5-object类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-object类型"}},[s._v("#")]),s._v(" 3.5 Object类型")]),s._v(" "),a("p",[s._v("ECMAScript中的对象其实就是一组 "),a("strong",[s._v("数据和功能")]),s._v(" 的集合。对象可以通过执行new操作符后跟要创建类型的名称来创建。Object类型是所有它的实例的基础，它所具有的属性和方法在更具体的对象中同样存在。")]),s._v(" "),a("p",[s._v("Object的每个实例都具有以下属性个方法：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("constructor")]),s._v("：构造函数；")]),s._v(" "),a("li",[a("code",[s._v("hasOwnProperty(propertyName)")]),s._v("：用于检查给定的属性在当前对象实例中是否存在，而不是在实例的原型中；")]),s._v(" "),a("li",[a("code",[s._v("isPrototypeOf(object)")]),s._v("：用于检查传入的对象，是否是当前对象的原型；")]),s._v(" "),a("li",[a("code",[s._v("propertyIsEnumerable(propertyName)")]),s._v("：用于检查给定的属性是否能使用for-in枚举；")]),s._v(" "),a("li",[a("code",[s._v("toLocaleString()")]),s._v("：返回对象的字符串表示，该字符串与执行环境的地区对应；")]),s._v(" "),a("li",[a("code",[s._v("toString()")]),s._v("：返回对象的字符串表示；")]),s._v(" "),a("li",[a("code",[s._v("valueOf()")]),s._v("：返回对象的字符串、数值或布尔值，通常与"),a("code",[s._v("toString()")]),s._v("方法的返回值相同。")])]),s._v(" "),a("h2",{attrs:{id:"四、操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、操作符"}},[s._v("#")]),s._v(" 四、操作符")]),s._v(" "),a("p",[s._v("可以操作字符串、数值、布尔值、对象（调valueOf()和toString()）")]),s._v(" "),a("h3",{attrs:{id:"_4-1-一元操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-一元操作符"}},[s._v("#")]),s._v(" 4.1 一元操作符")]),s._v(" "),a("p",[s._v("只能操作一个值。")]),s._v(" "),a("h4",{attrs:{id:"_4-1-1-递增和递减操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-递增和递减操作符"}},[s._v("#")]),s._v(" 4.1.1 递增和递减操作符")]),s._v(" "),a("p",[s._v("分为前置型和后置型。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于21，前置型会先自己“减减”再去参与外界计算")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于21，上一步num1为1，这一步是先参与外界计算，后才自己去“加加”")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上述对于数值，对于 "),a("strong",[s._v("其他类型也可用")]),s._v("，只是自动调用了"),a("code",[s._v("Number()")]),s._v("函数，再去操作“++”、“--”")]),s._v(" "),a("h4",{attrs:{id:"_4-1-2-一元加和一元减操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-一元加和一元减操作符"}},[s._v("#")]),s._v(" 4.1.2 一元加和一元减操作符")]),s._v(" "),a("p",[s._v("加号（+）放在数值前面对数值没有影响，而一元减相当于添加了符号。在一元加和一元减对非数值应用时跟一元操作符类似也调用了"),a("code",[s._v("Number()")]),s._v("函数。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"01"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s1的值变为了 -1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s2的值变为了 -1.1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s3的值变为了 NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b的值变为了 0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// f的值变为了 -1.1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\no "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// o的值变为了 1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_4-2-位操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-位操作符"}},[s._v("#")]),s._v(" 4.2 位操作符")]),s._v(" "),a("ul",[a("li",[s._v("ECMAScript中所有数字都以64位格式存储，但位操作符是操作32位格式的，所以操作前后是转换的；第32位是符号位：0表示正数，1表示负数；")]),s._v(" "),a("li",[s._v("负数在二进制中是以“二进制补码”格式存储的，计算补码的步骤：\n"),a("ul",[a("li",[s._v("求这个数值绝对值的二进制码")]),s._v(" "),a("li",[s._v("求二进制反码")]),s._v(" "),a("li",[s._v("在二进制反码上加1")])])]),s._v(" "),a("li",[s._v("而ECMAScript会尽力隐藏这些信息，一般是将这个负数的绝对值的二进制码前加一个负号，例如："),a("code",[s._v("var num = -18; num.toString(2); // “-10010”")])]),s._v(" "),a("li",[s._v("NaN和Infinity值应用位操作符时会被当成0处理，而对于非数值应用操作符会先用"),a("code",[s._v("Number()")]),s._v("函数将值转化为数值（自动完成的），后再用位操作符。")])]),s._v(" "),a("h4",{attrs:{id:"_4-2-1-按位非-not"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-按位非-not"}},[s._v("#")]),s._v(" 4.2.1 按位非(NOT)")]),s._v(" "),a("p",[s._v("按位非操作符由一个波浪线（"),a("code",[s._v("~")]),s._v("）表示，按位非歧视就是求反码。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v("num1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于 var num2 = -num - 1;即操作数的负值减1")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -26   ~在底层执行速度要更快")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"_4-2-2-按位与-and"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-按位与-and"}},[s._v("#")]),s._v(" 4.2.2 按位与(AND)")]),s._v(" "),a("p",[s._v("按位与操作符由一个和号（"),a("code",[s._v("&")]),s._v("）表示，它有两个操作数。"),a("br"),s._v("\n按位与操作只在两个数值的对应位都是1时才返回1，任意一位是0都返回0。")]),s._v(" "),a("h4",{attrs:{id:"_4-2-3-按位或-or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-按位或-or"}},[s._v("#")]),s._v(" 4.2.3 按位或(OR)")]),s._v(" "),a("p",[s._v("按位或操作符由一个竖线（"),a("code",[s._v("|")]),s._v("）表示，它也有两个操作数。"),a("br"),s._v("\n按位或操作在两个数值的对应位至少有一个1就可返回1，都是0才返回0。")]),s._v(" "),a("h4",{attrs:{id:"_4-2-4-按位异或-xor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-按位异或-xor"}},[s._v("#")]),s._v(" 4.2.4 按位异或(XOR)")]),s._v(" "),a("p",[s._v("按位异或操作符由一个插入符号（"),a("code",[s._v("^")]),s._v("）表示，它也有两个操作数。"),a("br"),s._v("\n按位异或操作在两个数值的对应位不同时返回1，都是1或都是0才返回0.")]),s._v(" "),a("h4",{attrs:{id:"_4-2-5-左移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-左移"}},[s._v("#")]),s._v(" 4.2.5 左移")]),s._v(" "),a("p",[s._v("左移操作符由两个小于号（"),a("code",[s._v("<<")]),s._v("）表示，符号右侧是要向左移的位数。"),a("br"),s._v("\n这个左移不会影响操作数的符号位，2左移5位是64，而-2就是-64。")]),s._v(" "),a("h4",{attrs:{id:"_4-2-6-有符号的右移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-有符号的右移"}},[s._v("#")]),s._v(" 4.2.6 有符号的右移")]),s._v(" "),a("p",[s._v("有符号的右移操作符由两个大于号（"),a("code",[s._v(">>")]),s._v("）表示，它右移空出的位置是用符号位的值来填充的。")]),s._v(" "),a("h4",{attrs:{id:"_4-2-7-无符号右移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-7-无符号右移"}},[s._v("#")]),s._v(" 4.2.7 无符号右移")]),s._v(" "),a("p",[s._v("无符号右移操作符由3个大于号（"),a("code",[s._v(">>>")]),s._v("）表示面对整数来说"),a("code",[s._v(">>")]),s._v("和"),a("code",[s._v(">>>")]),s._v("结果相同。但对负数来说，右移空出的位置是用0填充的不再是符号位（负数符号位是1）。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制11111111111111111111111111000000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" value2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制11111111111111111111111111111110")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" value3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制00000111111111111111111111111110")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_4-3-布尔操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-布尔操作符"}},[s._v("#")]),s._v(" 4.3 布尔操作符")]),s._v(" "),a("h4",{attrs:{id:"_4-3-1-逻辑非"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-逻辑非"}},[s._v("#")]),s._v(" 4.3.1 逻辑非")]),s._v(" "),a("p",[s._v("逻辑非操作符由一个叹号（"),a("code",[s._v("!")]),s._v("）表示，其实它相当于先调用"),a("code",[s._v("Boolean()")]),s._v("函数再取反，而"),a("code",[s._v('!!""')]),s._v("里的两个"),a("code",[s._v("!")]),s._v("就相当于"),a("code",[s._v("Boolean()")]),s._v("了，"),a("code",[s._v("Boolean()")]),s._v("函数转换规则可以参考之前的"),a("a",{attrs:{href:"#42-boolean%E7%B1%BB%E5%9E%8B"}},[s._v("小节")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_4-3-2-逻辑与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-逻辑与"}},[s._v("#")]),s._v(" 4.3.2 逻辑与")]),s._v(" "),a("p",[s._v("逻辑与操作符由两个和号（"),a("code",[s._v("&&")]),s._v("）表示，有两个操作数，真值表类似按位与。")]),s._v(" "),a("ul",[a("li",[s._v("如果第一个操作数是对象或第一个操作数（可能是表达式）求值结果为true时，它会返回第二操作数，否则返回一个操作数；")]),s._v(" "),a("li",[s._v("如果第一个操作数就是null、NaN、undefined，就直接返回null、NaN、undefined；")]),s._v(" "),a("li",[s._v("如果第一个操作数结果为true或对象，第二个操作数不能是未定义，否则会报错。")])]),s._v(" "),a("h4",{attrs:{id:"_4-3-3-逻辑或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-逻辑或"}},[s._v("#")]),s._v(" 4.3.3 逻辑或")]),s._v(" "),a("p",[s._v("逻辑或操作符由两个竖线符号（"),a("code",[s._v("||")]),s._v("）表示，有两个操作符，真值表类似按位或。")]),s._v(" "),a("ul",[a("li",[s._v("如果第一个操作数是空对象(null)或第一个操作数（可能是表达式）求值结果为false，会返回第二个操作数，否则返回第一个操作数；")]),s._v(" "),a("li",[s._v("如果两个操作数都是null、NaN、undefined，则返回null、NaN、undefined；")]),s._v(" "),a("li",[s._v("如果第一个操作数结果为false或空对象(null)，第二个操作数不能是未定义的，否则会报错。")])]),s._v(" "),a("h3",{attrs:{id:"_4-4-乘性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-乘性操作符"}},[s._v("#")]),s._v(" 4.4 乘性操作符")]),s._v(" "),a("p",[s._v("ECMAScript定义了3个乘性操作符：乘法、除法和求模。操作数为非数值时会自动调用"),a("code",[s._v("Number()")]),s._v("函数来转换。")]),s._v(" "),a("h4",{attrs:{id:"_4-4-1-乘法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-乘法"}},[s._v("#")]),s._v(" 4.4.1 乘法")]),s._v(" "),a("p",[s._v("乘法操作符由一个星号（"),a("code",[s._v("*")]),s._v("）表示，特殊规则：")]),s._v(" "),a("ul",[a("li",[s._v("如果有一个操作数是NaN，则结果是NaN（之前"),a("a",{attrs:{href:"#433-nan"}},[s._v("小节")]),s._v("里有说过）；")]),s._v(" "),a("li",[s._v("如果Infinity与0相乘，则结果是NaN（数学上规定"),a("code",[s._v("∞ * 0")]),s._v("和"),a("code",[s._v("0/0")]),s._v("和"),a("code",[s._v("∞/∞")]),s._v("是没有意义的，计算不出来）；")]),s._v(" "),a("li",[s._v("如果Infinity与非0数值相乘，结果是Infinity或-Infinity；")]),s._v(" "),a("li",[s._v("如果Infinity与Infinity相乘，结果是Infinity。")])]),s._v(" "),a("h4",{attrs:{id:"_4-4-2-除法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-除法"}},[s._v("#")]),s._v(" 4.4.2 除法")]),s._v(" "),a("p",[s._v("除法操作符由一个斜线符号（"),a("code",[s._v("/")]),s._v("）表示，特殊规则：")]),s._v(" "),a("ul",[a("li",[s._v("如果有一个操作数是NaN，则结果是NaN（之前"),a("a",{attrs:{href:"#433-nan"}},[s._v("小节")]),s._v("里有说过）；")]),s._v(" "),a("li",[s._v("如果零被零除，则结果是NaN（数学上规定"),a("code",[s._v("∞ * 0")]),s._v("和"),a("code",[s._v("0/0")]),s._v("和"),a("code",[s._v("∞/∞")]),s._v("是没有意义的，计算不出来）；")]),s._v(" "),a("li",[s._v("如果是非0数值被零除，结果是Infinity或-Infinity；")]),s._v(" "),a("li",[s._v("如果是Infinity被Infinity除，结果是NaN。")])]),s._v(" "),a("h4",{attrs:{id:"_4-4-3-求模"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-求模"}},[s._v("#")]),s._v(" 4.4.3 求模")]),s._v(" "),a("p",[s._v("求模（余数）操作符由一个百分号（"),a("code",[s._v("%")]),s._v("）表示，特殊规则：")]),s._v(" "),a("ul",[a("li",[s._v("如果被除数是无穷大而除数是有限大的数字，则结果是NaN；")]),s._v(" "),a("li",[s._v("如果被除数是有限大的数值而除数是0，则结果是NaN；")]),s._v(" "),a("li",[s._v("如果是Infinity被Infinity除，则结果是NaN；")]),s._v(" "),a("li",[s._v("如果被除数是有限大的数值而除数是无穷大的数值，结果是被除数；")])]),s._v(" "),a("h3",{attrs:{id:"_4-5-加性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-加性操作符"}},[s._v("#")]),s._v(" 4.5 加性操作符")]),s._v(" "),a("h4",{attrs:{id:"_4-5-1-加法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-1-加法"}},[s._v("#")]),s._v(" 4.5.1 加法")]),s._v(" "),a("p",[s._v("加法操作符（"),a("code",[s._v("+")]),s._v("）的用法：")]),s._v(" "),a("ul",[a("li",[s._v("如果有一个操作数是NaN，则结果是NaN（之前"),a("a",{attrs:{href:"#433-nan"}},[s._v("小节")]),s._v("里有说过）；")]),s._v(" "),a("li",[s._v("同号的Infinity相加结果还是同号的Infinity；")]),s._v(" "),a("li",[s._v("异号的Infinity相加则是NaN；")]),s._v(" "),a("li",[s._v("同号0相加还是同号0（结果与第一个操作数保持一致）；")]),s._v(" "),a("li",[s._v("异号0相加却是+0")]),s._v(" "),a("li",[s._v("如果其中一个操作数是字符串，另一个操作数是对象、数值或布尔值就会自动调用"),a("code",[s._v("toString()")]),s._v("方法取得字符串值并进行拼接，但另一个操作数是null、undefined则会自动调用"),a("code",[s._v("String()")]),s._v("函数取得字符串并进行拼接。")]),s._v(" "),a("li",[s._v("如果操作数为对象（{}）或者是数组（[]）这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接")])]),s._v(" "),a("p",[s._v("隐式转换面试题：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// []转化为字符串是""，有最后拼起来结果就是""')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// []转化为字符串是""，{}转化为字符串是"[object Object]"，所有最后拼起来结果就是"[object Object]"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 编译器将开头的{}理解为空代码块，那么这里“{} + []”相当于“+[]”，又相当于“Number([])”，那结果就是0；有些编译器会高级一点那就跟“[] + {}”结果一样是"[object Object]"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 跟上面同样道理，相当于“+{}”又相当于Number({})，其结果就是NaN；有些编译器就是两个{}的字符串的拼接，其结果是"[object Object][object Object]"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000008038678",target:"_blank",rel:"noopener noreferrer"}},[s._v("JS的{} + {}与{} + []的结果是什么？"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"_4-5-2-减法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-减法"}},[s._v("#")]),s._v(" 4.5.2 减法")]),s._v(" "),a("p",[s._v("减法操作符（"),a("code",[s._v("-")]),s._v("）的用法：")]),s._v(" "),a("ul",[a("li",[s._v("如果有一个操作数是NaN，则结果是NaN（之前"),a("a",{attrs:{href:"#433-nan"}},[s._v("小节")]),s._v("里有说过）；")]),s._v(" "),a("li",[s._v("同号的Infinity相减则是NaN；")]),s._v(" "),a("li",[s._v("异号的Infinity相减是Infinity，符号视情况而定；")]),s._v(" "),a("li",[s._v("同号0相减是+0；异号0相减结果与第一个操作数保持一致；")]),s._v(" "),a("li",[s._v("如果其中一个操作数是字符串、布尔值、null、undefined，则先调用Number()函数转换为数值再执行减法计算，担忧一个操作数是对象，则会调用valueOf()方法，如果没有valueOf()方法则会调用toString()得到字符串再转化为数值去计算。")])]),s._v(" "),a("h3",{attrs:{id:"_4-6-关系操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-关系操作符"}},[s._v("#")]),s._v(" 4.6 关系操作符")]),s._v(" "),a("p",[s._v("小于（"),a("code",[s._v("<")]),s._v("）、大于（"),a("code",[s._v(">")]),s._v("、小于等于（"),a("code",[s._v("<=")]),s._v("）、大于等于（"),a("code",[s._v(">=")]),s._v("，相应规则：")]),s._v(" "),a("ul",[a("li",[s._v("如果一个操作数是数值，则将另一个操作数转换为一个数值；")]),s._v(" "),a("li",[s._v("如果一个操作数是对象，则调用这个对象的valueOf()方法，如果没有valueOf()方法则调用toString()方法；")]),s._v(" "),a("li",[s._v("如果两个操作数都是字符串，则比较两个字符串对应位置的字符编码值。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Brick"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alphabet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，B的字符编码是66，a的字符编码是97")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Brick"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alphabet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，都转换为小写，b的字符编码大于a的")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"23"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// true，因为先比较第一位也就是"2"比"3"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"23"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，如果一个操作数是数值，则将另一个操作数转换为一个数值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，任何操作数与NaN进行关系比较时，其结果都为false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-7-相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-相等操作符"}},[s._v("#")]),s._v(" 4.7 相等操作符")]),s._v(" "),a("h4",{attrs:{id:"_4-7-1-相等和不相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-1-相等和不相等"}},[s._v("#")]),s._v(" 4.7.1 相等和不相等")]),s._v(" "),a("p",[s._v("两个等于号（"),a("code",[s._v("==")]),s._v("）表示相等操作符，叹号后跟等于号（"),a("code",[s._v("!=")]),s._v("）表示不相等操作符，这两个操作符都会先转换操作数（强制转型），然后再比较他们的相等性。")]),s._v(" "),a("ul",[a("li",[s._v("如果一个操作数是数值，另一个操作数是布尔值或字符串会先调用Number()函数转换成数值去比较相等性；")]),s._v(" "),a("li",[s._v("null和undefined比较相等性，是相等的，他们比较时没有去转换换成数值的；")]),s._v(" "),a("li",[s._v("如果有一个操作数是NaN，不管第二个操作数还是不是NaN，其相等操作符都会返回false，不相等操作符返回true（NaN不等于NaN）；")]),s._v(" "),a("li",[s._v("如果两个操作数都是对象，则比较他们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回true，否则返回false。")])]),s._v(" "),a("h4",{attrs:{id:"_4-7-2-全等和不全等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-2-全等和不全等"}},[s._v("#")]),s._v(" 4.7.2 全等和不全等")]),s._v(" "),a("p",[s._v("三个等于号（"),a("code",[s._v("===")]),s._v("）表示全等操作符，叹号后跟两个等于号（"),a("code",[s._v("!==")]),s._v("）表示不全等操作符，这两个操作符不但不转换操作数并且会先比较类型是否相同再比较相等性。null == undefined 返回true，null === undefined返回false。")]),s._v(" "),a("h3",{attrs:{id:"_4-8-条件操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-条件操作符"}},[s._v("#")]),s._v(" 4.8 条件操作符")]),s._v(" "),a("p",[s._v("也是三元运算符"),a("code",[s._v("xxx ? xxx : xxx")]),s._v("，例如："),a("code",[s._v("var max = (num1 > num2) ? num 1 : num2;")]),s._v("如果num1大于num2，那就返回中间num1的值，否则返回最后一个num2的值。")]),s._v(" "),a("h3",{attrs:{id:"_4-9-赋值操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-赋值操作符"}},[s._v("#")]),s._v(" 4.9 赋值操作符")]),s._v(" "),a("p",[a("code",[s._v("*=")]),s._v("，"),a("code",[s._v("/=")]),s._v("，"),a("code",[s._v("%=")]),s._v("，"),a("code",[s._v("+=")]),s._v("，"),a("code",[s._v("-=")]),s._v("，"),a("code",[s._v("<<=")]),s._v("，"),a("code",[s._v(">>=")]),s._v("，"),a("code",[s._v(">>>=")]),s._v("，主要是简化写法，其实没有任何性能的提升。")]),s._v(" "),a("h3",{attrs:{id:"_4-10-逗号操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-逗号操作符"}},[s._v("#")]),s._v(" 4.10 逗号操作符")]),s._v(" "),a("p",[s._v("可以执行多个操作、赋值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// num的值为0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"五、语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、语句"}},[s._v("#")]),s._v(" 五、语句")]),s._v(" "),a("h3",{attrs:{id:"_5-1-if语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-if语句"}},[s._v("#")]),s._v(" 5.1 if语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greater than 25."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Less than or equal to 25."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("推荐使用代码块，即使只有一行代码执行")]),s._v(" "),a("h3",{attrs:{id:"_5-2-do-while语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-do-while语句"}},[s._v("#")]),s._v(" 5.2 do-while语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i 小于10就会继续循环")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("不管表达式的结果如何，循环体内的代码至少会执行一次")]),s._v(" "),a("h3",{attrs:{id:"_5-3-while语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-while语句"}},[s._v("#")]),s._v(" 5.3 while语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("只有表达式结果为true时才会去执行循环体内的代码")]),s._v(" "),a("h3",{attrs:{id:"_5-4-for语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-for语句"}},[s._v("#")]),s._v(" 5.4 for语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 10")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("有三个表达式“初始化语句”、“循环条件”、“每执行完一次后的更变语句”。"),a("br"),s._v("\n由于ECMAScript中不存在 "),a("strong",[s._v("块级作用域")]),s._v("，因此在循环内部定义的变量也可以在外部访问到。")]),s._v(" "),a("h3",{attrs:{id:"_5-5-for-in语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-for-in语句"}},[s._v("#")]),s._v(" 5.5 for-in语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" propName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("propName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("精准的迭代语句，可以用来枚举对象的属性，对null和undefined使用for-in会报错，所以使用前要判断对象是否为null或undefined。")]),s._v(" "),a("h3",{attrs:{id:"_5-6-label语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-label语句"}},[s._v("#")]),s._v(" 5.6 label语句")]),s._v(" "),a("p",[s._v("在代码中添加标签，一遍将来使用，一般与break或continue配合使用")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("label1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v(" label1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_5-7-break和continue语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-break和continue语句"}},[s._v("#")]),s._v(" 5.7 break和continue语句")]),s._v(" "),a("p",[s._v("break语句会立即退出这一层的循环（这层的for循环），而continue是立即退出本次循环（for循环里会循环好几次，跳出这一次的）。")]),s._v(" "),a("h3",{attrs:{id:"_5-8-switch语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-switch语句"}},[s._v("#")]),s._v(" 5.8 switch语句")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"other"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("case里要是不带break的话，就会继续执行后面的case；default相当于else它不需要break；\nswitch语句可以使用任何数据类型，case的值可以是变量或表达式；\nswitch去比较使用的是全等“===”；\n它在一些情况下可以替代"),a("code",[s._v("if () {} else if () {} else {}")]),s._v("这样逻辑。")]),s._v(" "),a("h2",{attrs:{id:"六、函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、函数"}},[s._v("#")]),s._v(" 六、函数")]),s._v(" "),a("p",[s._v("ECMAScript中的函数使用function关键字来声明，后跟一组参数及函数体。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sagHi")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" message")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sagHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Nicholas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"how are you today?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "Hello Nicholas,how are you today?"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("任何函数都可使用return语句跟要返回的值来实现函数返回某值，并且函数都不需要定义返回值类型，"),a("code",[s._v("return;")]),s._v("后的语句是不可能再执行的")]),s._v(" "),a("p",[s._v("严格模式对函数有一些限制：")]),s._v(" "),a("ul",[a("li",[s._v("不能把函数或参数名取为"),a("code",[s._v("eval")]),s._v("或"),a("code",[s._v("arguments")]),s._v("；")]),s._v(" "),a("li",[s._v("不能出现两个命名参数同名的情况。")])]),s._v(" "),a("h3",{attrs:{id:"_6-1-理解函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-理解函数"}},[s._v("#")]),s._v(" 6.1 理解函数")]),s._v(" "),a("p",[s._v("ECMAScript函数有一个重要特点：命名的参数只提供便利，但不是必须的。意思是函数命名的参数只是为了告诉外部我大概需要几个什么样的参数，实际上调用函数时解析器不会拿传参和命名时的参数去做比较，不关心你传进来几个参数也不关心类型，只会把你的入参放在类似数组的arguments对象中，可以通过arguments[n]来访问第n个参数可以通过length属性来确定多少个参数传进来了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 20")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 50")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这个特性算不上完美的重载，但也足够弥补ECMAScript的这一缺憾了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("每次执行doAdd()函数都会重写第二个参数，arguments[1]和num2的值都会变为10，但他们的内存空间是独立只是值同步。如果num2在外部没有传值进来时是赋予的undefined。还有严格模式下arguments的值不能被重写。")]),s._v(" "),a("h3",{attrs:{id:"_6-2-没有重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-没有重载"}},[s._v("#")]),s._v(" 6.2 没有重载")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("重写")]),s._v(" 子类覆盖父类的方法（返回值和形参都不能改变，方法体改变了，也就是核心变了），在js里重写是可以的。")]),s._v(" "),a("li",[a("strong",[s._v("重载")]),s._v("：在同一个类里（执行环境），方法名相同而形参列表和方法体不一样的函数叫重载，这在js里是不存在的。")]),s._v(" "),a("li",[s._v("因为js里使用var和function这样的关键字来声明 "),a("strong",[s._v("同名变量")]),s._v(" 时，都会以最后一个声明为准，它会覆盖之前所有 "),a("strong",[s._v("同名")]),s._v(" 的声明；js里的同名函数的声明就是重载的写法，因为在同一个执行环境里，但由于同名的会被覆盖，那么js里没有函数重载这一说法。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addSomeNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addSomeNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addSomeNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// addSomeNumber被定义了2次，后定义的会覆盖先定义的")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);