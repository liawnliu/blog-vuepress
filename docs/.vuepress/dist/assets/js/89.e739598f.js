(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{712:function(t,s,a){"use strict";a.r(s);var n=a(13),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("    数组(Array)是一种聚合数据类型，它可以将若干变量有序地组织在一起。数组还可以有一维、二维以及多维等表现形式。（在JavaScript或TypeScript有现有的数组，不用再自己实现）")]),t._v(" "),a("h3",{attrs:{id:"线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),a("p",[t._v("    线性表(LinearList)是一种具有线性结构的有限序列。也就是说它的数据元素都是首尾相接的，依次形成一对一的关系。（例如栈、队列、链表等都是线性结构。在这里也不去实现线性表了，后面会去实现栈、队列、链表等数据结构）")]),t._v(" "),a("h2",{attrs:{id:"栈数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈数据结构"}},[t._v("#")]),t._v(" 栈数据结构")]),t._v(" "),a("p",[t._v("    栈(Stack)是一种遵从后进先出(LIFO)原则的受限线性表（受限表示对结点的操作受限制）。新添加或待删除的元素保存在栈的一端，这一端叫作栈顶；另一端是最先进入或者说最旧的元素，叫栈底。栈中没有数据时，称为空栈。"),a("br"),t._v("\n    栈的例子有很多，例如一摞书、餐厅里的盘子、编译器和内存中保存的变量和方法等、浏览器历史记录。")]),t._v(" "),a("h2",{attrs:{id:"基于数组的栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于数组的栈"}},[t._v("#")]),t._v(" 基于数组的栈")]),t._v(" "),a("p",[t._v("    基于数组的栈代码细节："),a("a",{attrs:{href:"https://gitee.com/liawnliu/datastructures_ts/blob/master/src/ts/data-structures/stack-array.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("stack-array.ts"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("    1.声明一个私有变量_items，类型为数组（用数组来保存栈里的元素，一维的数组也是线性结构特性），在下一节会介绍使用对象来保存栈（基于对象的栈）。"),a("br"),t._v("\n    2.栈的后进先出实现：用数组原生方法push和pop。（在实现栈时你也可以只用数组的unshift和shift方法，只要保证在一端进行操作）"),a("br"),t._v("\n    3.再提供一些栈常用的方法，例如："),a("br"),t._v("\n        peek查看栈顶元素（相当于查看数组的最后一项）"),a("br"),t._v("\n        isEmpty栈是否为空（相当于判断数组是否为空）"),a("br"),t._v("\n        size栈的大小（相当于查看数组的大小）"),a("br"),t._v("\n        clear清空栈（相当于把数组置空）"),a("br"),t._v("\n        toString返回栈的字符串形式（返回数组的字符串形式）")]),t._v(" "),a("h2",{attrs:{id:"基于对象的栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于对象的栈"}},[t._v("#")]),t._v(" 基于对象的栈")]),t._v(" "),a("p",[t._v("    基于对象的栈代码细节："),a("a",{attrs:{href:"https://gitee.com/liawnliu/datastructures_ts/blob/master/src/ts/data-structures/stack-object.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("stack-object.ts"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("    在处理大量数据的时候，需要评估方法的时间复杂度。而使用数组时，大部分方法的时间复杂度是O(n)。还有一点就是数组是元素的一个有序集合，要保证元素排列有序，它会占用更多的内存空间。"),a("br"),t._v("\n    而对象的使用，可以根据属性名直接获取元素，占用的内存空间也较少，也能保证一定的顺序。")]),t._v(" "),a("p",[t._v("    1.同样声明一个私有变量_items，但类型选用对象；再声明一个私有变量_count，用来记录栈的大小并且用来作为属性名。（用对象和count作为属性也能形成线性结构特性）")]),t._v(" "),a("p",[t._v("    2.栈的后进先出实现："),a("br"),t._v("\n        入栈：_count作为属性名将其添加到对象里，_count也要更新值（_count ++）"),a("br"),t._v("\n        出栈：要删除对象最后一个属性（使用delelte运算符），并将_count更新值（_count --）")]),t._v(" "),a("p",[t._v("    3.栈其他常用方法同上一节类似，只有一个toString方法实现需要遍历对象得到每个元素再使用toString最后将这些字符串连接起来。")]),t._v(" "),a("h2",{attrs:{id:"保护数据结构内部元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保护数据结构内部元素"}},[t._v("#")]),t._v(" 保护数据结构内部元素")]),t._v(" "),a("p",[t._v("    我们实现的Stack中声明的私有属性其实并不是真正意义上的私有属性，在js层面上它是基于原型的类还是可以通过一定的方法（getOwnPropertyNames）改变它（其实tslint可以辅助开发者，提示他不要修改私有变量_items）。")]),t._v(" "),a("p",[t._v("    1.下划线命名约定（上面用过）")]),t._v(" "),a("p",[t._v("    2.使用ES6限定作用域Symbol"),a("br"),t._v("\n    （这个方法其实也不行，用getOwnPropertySymbols可以拿到私有属性）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stackItems'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次操作时用this[_items]替换this._items")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("    3.使用ES6的WeakMap"),a("br"),t._v("\n    （这个方法其实可以，就是可读性差了一些）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" _items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次操作时需要this._items.get(this);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("    4.ECMAScript类属性提案"),a("br"),t._v("\n    （用#号作为前缀来声明私有属性，这是在JavaScript类中增加私有属性的提案，暂时使用不了）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    #items "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"用栈解决问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用栈解决问题"}},[t._v("#")]),t._v(" 用栈解决问题")]),t._v(" "),a("h3",{attrs:{id:"从十进制转换为二进制或任意进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从十进制转换为二进制或任意进制"}},[t._v("#")]),t._v(" 从十进制转换为二进制或任意进制")]),t._v(" "),a("p",[t._v("    从十进制转换为二进制或任意进制代码细节："),a("a",{attrs:{href:"https://gitee.com/liawnliu/datastructures_ts/blob/master/src/ts/others/base-converter.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("base-converter.ts"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("    将十进制数除以2，余数作为二进制的低位，保留商，再对商进行同样的操作（余数放到上一个位置稍高的位置）直到余数为0。用栈的方式去存储的话，就是把每个余数推入栈里，最后从栈里取出每个数用字符串连起来就是二进制了。")]),t._v(" "),a("h3",{attrs:{id:"平衡圆括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡圆括号"}},[t._v("#")]),t._v(" 平衡圆括号")]),t._v(" "),a("p",[t._v("    平衡圆括号代码细节："),a("a",{attrs:{href:"https://gitee.com/liawnliu/datastructures_ts/blob/master/src/ts/others/balanced-symbols.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("balanced-symbols.ts"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("    将字符串里的左括号存进栈结构里，遍历到右括号时与栈顶元素相匹配，栈为空或者匹配不成功就判为false，否则遍历完所有都匹配就认为这是平衡的圆括号")]),t._v(" "),a("h3",{attrs:{id:"汉诺塔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汉诺塔"}},[t._v("#")]),t._v(" 汉诺塔")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://gitee.com/liawnliu/datastructures_ts/blob/master/src/ts/others/hanoi.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉诺塔代码细节"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("    汉诺塔问题：")]),t._v(" "),a("ul",[a("li",[t._v("有三根柱子，第一根柱子放有从下往上按大小顺序摆放的圆盘，第二个柱子是临时存放点，第三根柱子是目的点。")]),t._v(" "),a("li",[t._v("需要把所有的圆盘从第一根柱子移动到第三根柱子，规定在小圆盘上不能放大圆盘并且在三根柱子之间一次只能移动一个圆盘。")])]),t._v(" "),a("p",[t._v("    思路：")]),t._v(" "),a("ul",[a("li",[t._v("假如有n个盘子，我们可以分解成三个大步骤：想办法将最上面的n-1个盘子放到临时点b处，然后将最底下的最大的盘子从源地点a移到目标地点c处，最后想办法将临时点b处的n个盘子移到目标地点c处。(用3个或者4个盘子移动可以验证)")]),t._v(" "),a("li",[t._v("仔细想一下，将最上面的n-1个盘子放到临时点b处是不是可以理解为，b作为终点c作为临时点，n-1个盘子根据汉诺塔规则从a移动到b；而将临时点b处的n个盘子移到目标地点c处是不是可以理解为，b作为源地点a作为临时点，n-1个盘子根据汉诺塔规则从b移动到c。")]),t._v(" "),a("li",[t._v("总的来说就是两个递归加一个a到c的移动")])])])}),[],!1,null,null,null);s.default=r.exports}}]);